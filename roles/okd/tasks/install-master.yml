---
- name: Install CoreOS Installer Package
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "coreos-installer"

# openssl passwd -1
#Password: changeme
#Verifying - Password: changeme
#$1$Zzh8f5xO$9r/7462gd8w.S8qmoPZ7d0


#- name: Copy Iginition Json Template
#  template:
#    src: "{{ item }}.j2"
#    dest: "{{ okd.base_path }}/{{ item }}"
#    owner: root
#    group: root
#    mode: 0755
#  register: copy_ignition_json_temp
#  with_items:
#    - "ignition.json"
#    - "dns-config.ini"
#- debug: msg={{ copy_ignition_json_temp }}


- name: Install Fedora CoreOS Master to Local NVME Drive
  shell: |
    coreos-installer install /dev/nvme0n1 --ignition-url=http://{{ manager_ipaddr1 }}:8080/master.ign \
    --insecure-ignition --copy-network
  register: install_coreos_master_local_drive
- debug: msg={{ install_coreos_master_local_drive }}
  when: print_debug == true


- name: Copy CoreOS Boot Entry for 1st NVME Disk
  template:
    src: "{{ item }}.j2"
    dest: "/etc/grub.d/{{ item }}"
    owner: root
    group: root
    mode: 0755
  register: copy_coreos_boot_entry
  ignore_errors: yes
  with_items:
    - "40_custom"
- debug: msg={{ copy_coreos_boot_entry }}


- name: Change Default Boot Entry for GRUB2
  lineinfile:
    dest: "{{ item.dest }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  register: change_default_boot_entry
  with_items:
    - { regexp: "^GRUB_DEFAULT=", line: "GRUB_DEFAULT=\"Fedora CoreOS\"", dest: "/etc/default/grub", state: present }
- debug: msg={{ change_default_boot_entry }}
  when: print_debug == true
# - { regexp: "^GRUB_DEFAULT=", line: "GRUB_DEFAULT=\"saved\"", dest: "/etc/default/grub", state: present }


- name: Install Fedora CoreOS Master to Local NVME Drive
  shell: |
    grub2-mkconfig -o /boot/grub2/grub.cfg
  register: install_coreos_local_drive
- debug: msg={{ install_coreos_local_drive }}
  when: print_debug == true


- name: Reboot Required
  shell: ( /bin/sleep 5; /sbin/shutdown -r now "Ansible updates triggered" ) &
  ignore_errors: true
  register: reboot_required
  async: 120
  poll: 0
  notify:
    - Waiting for Server to Come Back after Restart


- meta: flush_handlers


#
#- name: Check if OSD Pod are Running Normally
#  shell: kubectl -n rook-ceph get all | grep pod/rook-ceph-osd-{{ item }}
#  register: check_osd_pod
#  ignore_errors: yes
#  until: check_osd_pod.stdout.find("Ready") != -1
#  retries: 100
#  with_sequence: start=0 end=2
#- debug: msg={{ check_osd_pod }}
#
#
#
# oc get nodes | sed 1d | awk '{print $2}'
# The output should be Ready
#

# oc get pods -A | sed 1d | awk '{print $4}' | grep -v Running


